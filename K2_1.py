# -*- coding: utf-8 -*-
"""RFM_anaylsis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18GHuDqjyfLpaotztN8Hi3FssedxGJ9_-
"""

import pandas as pd
import datetime as dt

def check_df(dataframe):
    print("##################### Shape #####################")
    print(dataframe.shape)
    print("##################### Types #####################")
    print(dataframe.dtypes)
    print("##################### Head #####################")
    print(dataframe.head(3))
    print("##################### Tail #####################")
    print(dataframe.tail(3))
    print("##################### NA #####################")
    print(dataframe.isnull().sum())
    print("##################### Quantiles #####################")
    print(dataframe.select_dtypes(include=['number']).quantile([0, 0.05, 0.50, 0.95, 0.99, 1]).T)

def load_and_preprocess_data(file_path, timestamp_col='Timestamp'):
    """
    CSV dosyasını yükler ve belirtilen zaman damgası sütununu datetime formatına dönüştürür.
    """
    try:
        df = pd.read_csv(file_path)
        print(f"'{file_path}' dosyası başarıyla yüklendi.")
    except FileNotFoundError:
        print(f"Hata: '{file_path}' dosyası bulunamadı.")
        return None
    except Exception as e:
        print(f"Hata: Dosya yüklenirken bir sorun oluştu: {e}")
        return None

    if timestamp_col in df.columns:
        df[timestamp_col] = pd.to_datetime(df[timestamp_col])
        print(f"'{timestamp_col}' sütunu datetime formatına dönüştürüldü.")
    else:
        print(f"Uyarı: '{timestamp_col}' sütunu DataFrame'de bulunamadı. Lütfen doğru sütun adını kontrol edin.")
        return None
    return df

def calculate_rfm_metrics(dataframe, customer_id_col, timestamp_col, total_price_col):
    """
    Verilen DataFrame'den Recency, Frequency ve Monetary metriklerini hesaplar.
    """
    if dataframe is None or timestamp_col not in dataframe.columns or customer_id_col not in dataframe.columns or total_price_col not in dataframe.columns:
        print("Hata: RFM metriklerini hesaplamak için gerekli sütunlar bulunamadı veya DataFrame boş.")
        return None

    analysis_date = dataframe[timestamp_col].max() + dt.timedelta(days=1)
    print(f"\nRFM Analizi için Belirlenen 'Bugün' Tarihi: {analysis_date}")

    rfm_df = dataframe.groupby(customer_id_col).agg(
        Recency=(timestamp_col, lambda date: (analysis_date - date.max()).days),
        Frequency=(timestamp_col, 'count'),
        Monetary=(total_price_col, 'sum')
    ).reset_index()

    rfm_df.rename(columns={customer_id_col: 'customer_id'}, inplace=True)

    print("\nRFM Metrikleri Başarıyla Hesaplandı.")
    print(rfm_df.head())
    print(f"\nToplam Benzersiz Müşteri Sayısı: {rfm_df['customer_id'].nunique()}")
    return rfm_df

def calculate_rfm_scores(rfm_df):
    """
    RFM metriklerini kullanarak R, F, M skorlarını ve RF/RFM skorlarını hesaplar.
    """
    if rfm_df is None:
        print("RFM skorlarını hesaplamak için DataFrame mevcut değil.")
        return None

    rfm_df["recency_score"] = pd.qcut(rfm_df['Recency'], q=5, labels=[5, 4, 3, 2, 1])
    rfm_df["frequency_score"] = pd.qcut(rfm_df['Frequency'].rank(method="first"), q=5, labels=[1, 2, 3, 4, 5])
    rfm_df["monetary_score"] = pd.qcut(rfm_df['Monetary'], q=5, labels=[1, 2, 3, 4, 5])

    rfm_df["RF_SCORE"] = (rfm_df['recency_score'].astype(str) + rfm_df['frequency_score'].astype(str))
    rfm_df["RFM_SCORE"] = (rfm_df['recency_score'].astype(str) + rfm_df['frequency_score'].astype(str) + rfm_df['monetary_score'].astype(str))

    print("\nRFM Skorları Başarıyla Hesaplandı.")
    print(rfm_df.head())
    return rfm_df

def segment_customers(rfm_df):
    """
    RF_SCORE'a göre müşteri segmentlerini tanımlar.
    """
    if rfm_df is None or 'RF_SCORE' not in rfm_df.columns:
        print("Müşteri segmentasyonu için RF_SCORE sütunu veya DataFrame mevcut değil.")
        return None

    seg_map = {
        r'[1-2][1-2]': 'hibernating',
        r'[1-2][3-4]': 'at_Risk',
        r'[1-2]5': 'cant_loose',
        r'3[1-2]': 'about_to_sleep',
        r'33': 'need_attention',
        r'[3-4][4-5]': 'loyal_customers',
        r'41': 'promising',
        r'51': 'new_customers',
        r'[4-5][2-3]': 'potential_loyalists',
        r'5[4-5]': 'champions'
    }

    rfm_df['segment'] = rfm_df['RF_SCORE'].replace(seg_map, regex=True)

    print("\nMüşteri Segmentleri Başarıyla Tanımlandı.")
    print(rfm_df.head())
    return rfm_df

# Ana RFM analiz fonksiyonu
def run_rfm_analysis(file_path, customer_id_col, timestamp_col, total_price_col):
    """
    Uçtan uca RFM analiz sürecini yönetir: veri yükleme, ön işleme, EDA,
    RFM metriklerini ve skorlarını hesaplama, ve müşteri segmentasyonu.

    Args:
        file_path (str): CSV dosyasının yolu.
        customer_id_col (str): Müşteri ID'sini içeren sütunun adı.
        timestamp_col (str): İşlem zaman damgasını içeren sütunun adı.
        total_price_col (str): İşlem başına toplam fiyatı içeren sütunun adı.

    Returns:
        pd.DataFrame: RFM segmentleri ve skorlarını içeren nihai DataFrame.
    """
    print("===== RFM Analizi Başlatılıyor =====")

    # 1. Veriyi Yükle ve Zaman Damgasını Dönüştür
    df_processed = load_and_preprocess_data(file_path, timestamp_col=timestamp_col)
    if df_processed is None:
        print("Veri yükleme veya ön işleme hatası nedeniyle analiz durduruldu.")
        return None

    # 2. Temel Keşifçi Veri Analizi (EDA)
    print("\n===== Temel EDA Raporu =====")
    check_df(df_processed) # Sizin check_df fonksiyonunuz burada çağrılıyor

    # 3. RFM Metriklerini Hesapla
    rfm_metrics_df = calculate_rfm_metrics(df_processed,
                                           customer_id_col=customer_id_col,
                                           timestamp_col=timestamp_col,
                                           total_price_col=total_price_col)
    if rfm_metrics_df is None:
        print("RFM metrikleri hesaplanamadı, analiz durduruldu.")
        return None

    # 4. RFM Skorlarını Hesapla
    rfm_scores_df = calculate_rfm_scores(rfm_metrics_df)
    if rfm_scores_df is None:
        print("RFM skorları hesaplanamadı, analiz durduruldu.")
        return None

    # 5. Müşterileri Segmentlere Ayır
    final_rfm_df = segment_customers(rfm_scores_df)
    if final_rfm_df is None:
        print("Müşteri segmentasyonu yapılamadı, analiz durduruldu.")
        return None

    print("\n===== RFM Analizi Tamamlandı =====")

    # Segmentlerin özet istatistikleri
    print("\n===== Segmentlerin RFM Ortalama Değerleri =====")
    segment_analysis = final_rfm_df.groupby('segment').agg({
        'Recency': 'mean',
        'Frequency': 'mean',
        'Monetary': 'mean',
        'customer_id': 'count'
    }).sort_values(by='Monetary', ascending=False)
    print(segment_analysis)
    print("="*60 + "\n")

    return final_rfm_df

def save_rfm_to_csv(rfm_dataframe, output_file_name="rfm_results.csv", index=False):
    """
    RFM DataFrame'ini belirtilen CSV dosyasına kaydeder.

    Args:
        rfm_dataframe (pd.DataFrame): Kaydedilecek RFM DataFrame'i (Recency, Frequency, Monetary,
                                      skorlar ve segment sütunlarını içeren).
        output_file_name (str): Çıktı CSV dosyasının adı. Varsayılan: "rfm_results.csv".
        index (bool): DataFrame indeksini CSV dosyasına yazıp yazmayacağını belirtir.
                      Genellikle RFM çıktısı için false olması tercih edilir. Varsayılan: False.
    """
    if not isinstance(rfm_dataframe, pd.DataFrame):
        print("Hata: Sağlanan girdi bir Pandas DataFrame'i değil.")
        return

    try:
        # İstenen sütunların DataFrame'de olup olmadığını kontrol edelim
        required_cols = ['Recency', 'Frequency', 'Monetary',
                         'recency_score', 'frequency_score', 'monetary_score',
                         'RF_SCORE', 'RFM_SCORE', 'segment']

        # Eğer 'customer_id' de varsa, onu da ekleyelim ki her satır hangi müşteriye ait belli olsun
        if 'customer_id' in rfm_dataframe.columns:
            required_cols.insert(0, 'customer_id')

        # Sadece ilgili sütunları seçmeye çalışalım, olmayanları yoksayalım
        cols_to_save = [col for col in required_cols if col in rfm_dataframe.columns]

        if not cols_to_save:
            print("Uyarı: Kaydedilecek geçerli bir sütun bulunamadı. Lütfen DataFrame'i kontrol edin.")
            return

        # Sadece seçili sütunları içeren yeni bir DataFrame oluştur
        df_to_save = rfm_dataframe[cols_to_save]

        df_to_save.to_csv(output_file_name, index=index)
        print(f"RFM sonuçları '{output_file_name}' dosyasına başarıyla kaydedildi.")
    except Exception as e:
        print(f"Hata: RFM sonuçları CSV dosyasına kaydedilirken bir sorun oluştu: {e}")

my_file_path = r"E:\israf\K1-20250803T110136Z-1-002\K1\simulated_pos_data_with_seasonal_trends.csv"

# Veri setinizdeki ilgili sütun isimleri
my_customer_id_col = 'Customer_ID'
my_timestamp_col = 'Timestamp'
my_total_price_col = 'Total_Price'

# RFM analizini tek bir çağrı ile çalıştırın!
final_rfm_dataframe = run_rfm_analysis(
    file_path=my_file_path,
    customer_id_col=my_customer_id_col,
    timestamp_col=my_timestamp_col,
    total_price_col=my_total_price_col
)

# Nihai RFM DataFrame'ini kontrol edebilirsiniz (isteğe bağlı)
if final_rfm_dataframe is not None:
    print("\nNihai RFM DataFrame'inin Son Hali:\n", final_rfm_dataframe.head())

    output_csv_name = "simulated_pos_rfm_analysis_results.csv"

    save_rfm_to_csv(final_rfm_dataframe, output_file_name=output_csv_name)
else:
    print("RFM analizi tamamlanamadığı için sonuçlar kaydedilemedi.")